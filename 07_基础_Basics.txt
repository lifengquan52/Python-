基础
仅仅是打印 hellow world 是没有作用的，对吧？你想要做的比这更多-你想要做一些输入，操作，以及输出，我们会在这个章节学习一些其他的概念。

注释
注释在任何文字中可以使用#符号来表示，主要用作程序读者的注释。

例如：

print('hello world') # 请注意print是一个函数

或者：
# 请注意print是一个函数
print('hello world') 

[overcome-克服]
使用有用的注释，能够让你的程序：
1.解释假设
2.解释重要的详细内容
3.解释你尝试解决的问题
4.解释你正在克服的问题，等等。

代码告诉你怎么做，注释告诉你为什么这么做。
这对于读者来说是方便阅读的。请记住，一个人只需要六个月就能成为你想要成为的人。

文字常量 | Constants
一个关于文字常量的例子就是5，1.23或者一个字符串例如”This is a string“ 或者 ”It's a string！“
我们将其称为文字(字符)因为它是字面上的-您从字面上使用它的值。数字2经常代表他自己没有其他含义-这是一个常量(constants)因为这个值不能够被改变。然而，这些都称之为文字常量。

数字 Numbers
数字主要由两种类型的分类-整数和浮点数

一个整数的例子就是2，它仅仅只是一个整数。

关于浮点数的例子就有例如3.23 以及 4. E代表10的幂。在这个案例中，52.3E-4意味着52.3 * 10^-4^.

经验丰富的程序员注意事项
长类型没有任何的区分。int类型可以是任何大小的整数。

字符串 String
字符串是一个序列的字符。字符串基本上是一堆文字。
你将在几乎所有编程的Python语言中使用字符串因此，请注意一下一些内容：

单引号：
你可以指定字符串作为一个单引号，例如‘Quote me on this’ 引号内的所有空白（即空格和制表符）均按原样保留。

双引号：
字符串在双引号的工作过程中和单引号的作用是一样的，例如”What's your name？“

三引号：
你可以指定多行的字符来使用三引号-（”“”或者‘’‘）。你可以在三引号里面自由的输入多引号。一个例子就是：
'''This is a multi-line string. This is the first line.
This is the second line.
"What's your name?," I asked.
He said "Bond, James Bond."
'''

字符串是不可变的
这意味着，一旦你创建了字符串，你就不能够改变它。虽然这个可能看起来像一件坏事，但是他真的没那么糟糕。我们将看到为什么这不是我们稍后看到的各种程序中的限制。

C/C++编程者的注意事项
在Python中，没有区分char数据。这里并没有真的需要它并且我确定你不会丢失它。

Perl/PHP 编程者的注意事项
请注意单引号和双引号是相同的-他们没有任何的不同。

格式化方法
同样，我们可能想要从其他的信息中构建字符串。这样format()方法就很有用了。

age = 20
name = 'Swaroop'

print('{0} was {1} years old when he wrote this book'.format(name, age))
print('Why is {0} playing with that python?'.format(name))

Output:
$ python str_format.py
Swaroop was 20 years old when he wrote this book
Why is Swaroop playing with that python?

coreesponding 对应的
怎么工作的
一个字符串可以使用某些规范以及序列，format 方法可以取代这些制定的方式，通过对应的参数format方法。

很明显的就是我们第一个就是使用{0}作为对应的变量名称，这就是format方法的第一个参数。相似的，第二个规则就是{1}对应的就是age这就是format方法里面的第二个参数。请注意Python从0开始计数，这意味着第一个位置在索引0上面，第二个位置就是索引1，以此类推。

请注意连接字符串，我们能够达到相同的效果。
name+’is‘+str(age)+'years old'

但是折痕丑陋，而且容易出错。其次，将通过format方法自动完成到字符串的转换，而不是在这种情况下显式地转换为字符串。第三，当使用format方法的时候，我们可以更改消息而不必处理所使用的变量，反之亦然。

还要注意数字是可选项，你也可以这么写：
age = 20
name = 'Swaroop'

print('{} was {} years old when he wrote this book'.format(name, age))
print('Why is {} playing with that python?'.format(name))

它将提供与先前程序相同的确切输出。
我们还可以命名参数：
age = 20
name = 'Swaroop'

print('{name} was {age} years old when he wrote this book'.format(name=name, age=age))
print('Why is {name} playing with that python?'.format(name=name))

它将提供与先前程序相同的确切输出。
Python 3.6引入了一种较短的方法来执行命名参数，称为“ f-strings”：
age = 20
name = 'Swaroop'

print(f'{name} was {age} years old when he wrote this book')  # notice the 'f' before the string
print(f'Why is {name} playing with that python?')  # notice the 'f' before the string

它将提供与先前程序相同的确切输出。
Python在format方法中的作用是它将每个参数值替换为规范的位置。
可以有更多详细的规范，例如：
# decimal (.) precision of 3 for float '0.333'
print('{0:.3f}'.format(1.0/3))
# fill with underscores (_) with the text centered
# (^) to 11 width '___hello___'
print('{0:_^11}'.format('hello'))
# keyword-based 'Swaroop wrote A Byte of Python'
print('{name} wrote {book}'.format(name='Swaroop', book='A Byte of Python'))

输出：
0.333
___hello___
Swaroop wrote A Byte of Python
由于我们正在讨论格式设置，因此请注意，打印始终以不可见的“换行”字符（\ n）结尾，因此重复调用print将全部打印在单独的一行上。
为了防止打印此换行符，您可以指定它应以空白结尾
print('a', end='')
print('b', end='')

输出是：
ab

或者你可以 通过end一个空格结尾
print('a', end=' ')
print('b', end=' ')
print('c')

输出是：
a b c

Escape Sequences 转义序列
假设，你想要有一个字符串它包含一个单引号(')，你会怎么制定这个字符串？例如，这个字符串是“What's your name?”。你不能制定’what's‘ your name’。Python会混淆字符串的开始和结束位置。所以你会有一个制定的单引号，并不表示字符串的结尾。这个可以通过我们称之为转义序列来进行帮助。你制定单个引号作为 \':请注意反斜杠。现在，你可以指定字符串作为'What\‘s your name?'
另一只方式指定字符串就是“What's your name？”等使用双引号。相似的，你必须使用转义序列。同样你必须指定反斜杠来使用转义序列。\\
如果你想要指定一个2行字符串呢？一种方法是使用三引号字符串，就像我们之前所显示的那样或者你可以使用换一序列来尽心一个新的字符 = \n 来制定一个新的开始。一个例子就是：
'This is the first line\nThis is the second line'

有一件事情需要注意的是字符串，一个单独的斜杠会在后面表示着字符串会继续接着下一行，但是不会增加新的一行。例如：
"This is the first sentence. \
This is the second sentence."

这相当于：
"This is the first sentence. This is the second sentence."

[prefixing-前缀]
[escape sequences - 转义序列] 
原始字符串
如果您需要指定一些字符串，那里没有特殊的过程，没有处理转义序列等特殊处理的地方，那么您需要通过在字符串前添加r或R来指定原始字符串。例如：
r"Newlines are indicated by \n"
996-112-332
给正则表达式的用户
处理正则表达式时，请始终使用原始字符串。
否则，可能需要大量的反击。
例如，反向引用可以称为'\\ 1'或r'\

