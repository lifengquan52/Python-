我们会看到如何在Python中运行‘Hello World’，存储并且运行Python。

这里有两种方式来使用Python运行你的项目-使用交互式的解释器提示。这会教你如何编写。

使用编译器提示
在你的操作系统中打开terminal(我们在之前的安装讨论中有提示)，然后通过输入Python3 以及 回车 键来打开Python提示器。
一旦你开始了Python，你应该查看 >>> 在这里你能够开始输入一些东西。这里就称为Python 解释提示器 (Python interpreter prompt).

在Python解释提示器中，输入：
print("Hello World")


[regradless-无论]
[immediately-很快地]
然后按下[enter]键，你就可以在屏幕中看到Hello World显示了。
这里是一个你应该看到的示例，当使用一个Mac OS X 电脑的时候。根据您的计算机，有关Python软件的详细信息会有所不同，但是有一部分来自于提示器(如 来自 >>> 向前) 无论使用什么系统，都是相同的。

$ python3
Python 3.6.0 (default, Jan 12 2017, 11:26:36)
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print("Hello World")
Hello World


请注意Python会很快地给你输出！你只需要输入一个Python语句。我们使用 print 来打印任何你提供给他的值。在这里，我们提供了文字 Hello World 以及这个提示的打印信息在屏幕中。

怎么退出Interpreter prompt
如果你正在使用一个GNU/Linux 或者OSX shell，你可以通过点击[ctrl+d]来或者输入 exit() (注意：这里包含小括号)然后输入[回车]键。

如果你使用Windows命令提示器，你可以通过[ctrl+z]然后点击[回车]键。

[indentation-缩进]
选择一个编辑器
每次我们要运行某些内容时，我们都无法在解释器提示符下键入程序，所以我们必须把文件存储起来用于任何时间运行我们的程序。

为了创建我们的Python资源文件，我们需要一个编辑器软件这样你可以输入和存储这些文件。一个好的程序编辑器会让你的生活更加轻松。因此，选择一个编辑器是非常至关重要的。你必须选择一个编辑器作为你的，就像选择要购买的汽车一样。一个好的编辑器可以帮助你编写Python，让你的旅程更加舒适并且用更快更安全的方式帮助你到达目的地。
其中一个非常重要的基础需求就是语法高亮(syntax highlighting)，Python程序的所有不同部分都以彩色显示，以便您可以看到程序并可视化其运行情况。
如果你不知道从何入手，我建议你使用PyCharm Educational Edition软件，它能够在Windows、Mac OS X 以及 GNU/Linux中运行。详细的请看下一章节。
如果你在使用Windows，请不要使用Notepad - 他非常的糟糕，因为它没有任何的语法高亮并且很重要的是它不支持文字的缩进，这非常的重要，我们会在之后有所了解。好的编辑器会自动的做这些内容。

[reiterate-重申]
[proper-合适的]
如果你是一个有经验的编程者，你可能已经在使用Vim或者Emacs了。话不多说，这两个强有力的编辑器能够让你很好的使用并且编写Python程序。我个人在大多数程序中都使用了这些，并且在Vim中编写了整本书。
如果你愿意花时间学习Vim或者Emacs，那么我强烈建议您一定要学会使用它们中的任何一个，因为从长远来看，这对您非常有用。然而，我需要事先提醒的是，初学者可以使用PyCharm然后聚焦到Python中而不是编辑器本身。
我需要重申，请选择一个合适的编辑器。它能够让程序编写变得更为轻松且简单。

使用一个源文件：
现在让我们回到编程。有一种传统，每当你学习一个新的编程语言的时候，你都需要在程序中运行‘Hello World’。所有的都会在”Hello World“中进行第一步的运行。就像Simon Cozens说的，这是一个”编程的传统咒语，帮助你更好地学习语言“。
开始选择编辑器，输入下面的城区，并且存储其为hello.py
如果你使用PyCharm，我们已经讨论过怎么讨论源文件。
对于编辑器，打开一个新的 hello.py 文件，然后输入
print("hello world")

你应该把这些文件放在哪？放到你知道的任何文件夹中。如果你不能理解我在说的内容，你可以创建一个新的文件夹然后使用这个路径来存储和运行你的python程序：
/tmp/py on Mac OS X
/tmp/py on GNU/Linux
C:\py on Windows

为了创建上面的文件夹(用于你使用的操作系统)，在terminal中使用mkdir命令，例如 mkdir tmp/py.
重点：请确保你的文件已经给到的扩展名.py。例如,foo.py。
为了运行你的Python项目：
1.打开一个terminal 窗口 (查看之前安装的章节怎么做的)
2.改变你存储的路径，例如 cd /tmp/py
3.通过输入命令运行程序 python hello.py。就像下面的输出。
$ python hello.py
hello world

在terminal中运行程序截图
如果你得到了一个上述的输出，恭喜你！你已经成功的运行了你的第一个Python程序。你已经跨越了学习编程最难的一部，这意味着，你可以开始你的第一个编程。
如果出现错误，请完全按照上面的显示键入上面的程序，然后再次运行该程序。
请注意，Python区分大小写，即print与Print不相同-注意前者的小写字母p和后者的大写字母p。
另外，请确保每行的第一个字符之前没有空格或制表符-我们稍后将了解为什么这很重要

怎它怎么工作的
一个Python编程是由语句组成。在我们的第一个程序中，我们仅仅有一个语句。在这个语句中，我们调用了print语句，我们称为”hello world“

获取帮助？
如果你需要快速的知道function或者statement在Python中的用途，你可以使用内置的 help 函数。这是非常有用的当你使用解释器是器的时候。例如，运行help('len') - 这就显示了len函数的帮助，它用来计算项目的数量。

提示：按下q用于退出帮助。
同样，您可以获得有关Python中几乎所有内容的信息。
使用help（）了解有关使用帮助本身的更多信息！
万一您需要获得诸如return之类的运算符的帮助，则需要将其放在诸如help（'return'）之类的引号内，以使Python不会对我们试图做的事情感到困惑。

总结
你现在应该可以编写，存储和运行Python程序了。
现在你是一个Python用户，让我们学习更多关于Python的概念吧。


